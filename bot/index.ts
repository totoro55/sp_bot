import {Bot, GrammyError, HttpError, InlineKeyboard, InputFile, Keyboard, session} from "grammy";
import 'dotenv/config';
import getUser from "./global/handlers/getUser";
import {startKeyboard} from "./global/keyboards/start";
import addCallbacks from "./callbacks";
import {MyApi, MyContext, SessionData} from "../types/global/myContext";
import addMiddlewares from "./middlewares";
import {hydrate} from "@grammyjs/hydrate";
import {conversations, createConversation} from "@grammyjs/conversations";
import {hydrateFiles} from "@grammyjs/files";
import feedback from "./global/conversations/feedback";
import addHears from "./hears";
import report from "./marketing/conversations/report";
import getReportCurrentPhotosByReportId from "./marketing/handlers/getReportCurrentPhotosByReportId";
import {getFilesFromZip} from "./marketing/helpers/getPhotosFromZip";


require('dotenv').config();

// Create a bot object
const bot = new Bot<MyContext, MyApi>(process.env.BOT_TOKEN!); // <-- place your bot token in this string

function initial(): SessionData {
    return {
        user: null,
        auth_expires_in: 0,
        selected_filial: null,
        marketing_report_period: null,
        marketing_report_files: [],
        marketing_report: null,
        marketing_report_curren_files: []
    };
}

bot.use(session({initial}));

bot.api.config.use(hydrateFiles(process.env.BOT_TOKEN!));
bot.use(hydrate())
bot.use(conversations({
    async onExit(id, ctx) {
        if (id === "report") {

            if (ctx.session.marketing_report && ctx.session.marketing_report.reportId) {
                try {
                    await ctx.reply("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞ –ø–æ–¥–æ–∂–¥–∏—Ç–µ, –∑–∞–≥—Ä—É–∂–∞–µ—Ç—Å—è —Å–ø–∏—Å–æ–∫ —Ä–∞–Ω–µ–µ –¥–æ–±–∞–≤–ª–µ–Ω–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤")
                    const filesBase64 = await getReportCurrentPhotosByReportId(Number(ctx.session.marketing_report.reportId))
                    const files = await getFilesFromZip(filesBase64)

                    if (files && files.length > 0) {
                        for (const file of files) {
                            const fileId = Date.now().toString()
                            const msg = await ctx.replyWithDocument(new InputFile(file.content, file.filename), {
                                caption: file.filename,
                                reply_markup: new InlineKeyboard().text("–£–¥–∞–ª–∏—Ç—å —Ñ–∞–π–ª", "delete_file_"+fileId)
                            })
                            const fileUrl = await bot.api.getFile(msg.document.file_id).then(res => res.getUrl())
                            ctx.session.marketing_report_curren_files = [...ctx.session.marketing_report_curren_files, {fileId: fileId, fileUrl: fileUrl}]
                        }
                    } else {
                        await ctx.reply("–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å —Ñ–∞–π–ª—ã –∏–ª–∏ —Ñ–∞–π–ª—ã –∫ —É–∫–∞–∑–∞–Ω–Ω–æ–º—É –æ—Ç—á–µ—Ç—É –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç.")
                    }
                    await ctx.reply("–ó–∞–≥—Ä—É–∂–µ–Ω—ã —Ñ–∞–π–ª—ã. –í—ã –º–æ–∂–µ—Ç–µ —É–¥–∞–ª–∏—Ç—å —Ñ–∞–π–ª –Ω–∞–∂–∞–≤ –Ω–∞ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â—É—é –∫–Ω–æ–ø–∫—É —Ä–∞—Å–ø–æ–ª–æ–∂–µ–Ω–Ω—É—é –ø–æ–¥ –Ω–∏–º.")
                } catch (e) {
                    await ctx.reply(`–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å —Å–ø–∏—Å–æ–∫ –∏–º–µ—é—â–∏—Ö—Å—è —Ñ–∞–π–ª–æ–≤ –æ—à–∏–±–∫–∞ ${JSON.stringify(e)}`)
                }
            }

            await ctx.reply("–î–æ–±–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ/–≤–∏–¥–µ–æ, –æ—Ç–æ–±—Ä–∞–∂–∞—é—â–∏–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∫–æ–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏.\n–ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–π —Ä–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞ - 1–ú–±\n–ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π —Ä–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞ - 20–ú–±.\n\n" +
                "–î–ª—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–π –æ—Ç–ø—Ä–∞–≤–∫–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å —Ñ–æ—Ç–æ –±–µ–∑ —Å–∂–∞—Ç–∏—è, –∫–∞–∫ —Ñ–∞–π–ª—ã. –í–∏–¥–µ–æ –º–æ–∂–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å —Å–æ —Å–∂–∞—Ç–∏–µ–º.", {
                reply_markup: new Keyboard()
                    .text("–ó–∞–≤–µ—Ä—à–∏—Ç—å –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ —Ñ–∞–π–ª–æ–≤").row()
                    .text("–û—Ç–º–µ–Ω–∏—Ç—å —Å–æ–∑–¥–∞–Ω–∏–µ –æ—Ç—á–µ—Ç–∞").row()
            })
        }
    }
}))
bot.use(createConversation(feedback));
bot.use(createConversation(report))
addMiddlewares(bot)
addCallbacks(bot)
addHears(bot)

bot.on(":file", async (ctx) => {
    if (!ctx.session.marketing_report) return
    if (!ctx.message) return

    if (ctx.message?.photo) {
        await ctx.reply(`–§–∞–π–ª –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ. –§–æ—Ç–æ –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã –∫–∞–∫ —Ñ–∞–π–ª, –±–µ–∑ —Å–∂–∞—Ç–∏—è.
–í–∏–¥–µ–æ –º–æ–∂–Ω–æ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ —Å–∂–∞—Ç–∏–µ–º.\n\n–ü–æ—Å–ª–µ –∑–∞–≥—Ä—É–∑–∫–∏ –≤—Å–µ—Ö —Ñ–∞–π–ª–æ–≤ –Ω–∞–∂–º–∏—Ç–µ "–ó–∞–≤–µ—Ä—à–∏—Ç—å –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ —Ñ–∞–π–ª–æ–≤"`)
        return
    }
    const regex = /video|image/i;

    if (ctx.message.document) {
        if (!regex.test(ctx.message.document.mime_type || "")) {
            await ctx.reply(`–§–∞–π–ª ${ctx.message.document.file_name} –Ω–µ –ø—Ä–∏–Ω—è—Ç, —Ç–∞–∫ –∫–∞–∫ –Ω–µ —è–≤–ª—è–µ—Ç—Å—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ–º –∏–ª–∏ –≤–∏–¥–µ–æ.\n–§–æ—Ç–æ –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã –∫–∞–∫ —Ñ–∞–π–ª, –±–µ–∑ —Å–∂–∞—Ç–∏—è.
–í–∏–¥–µ–æ –º–æ–∂–Ω–æ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ —Å–∂–∞—Ç–∏–µ–º.\n\n–ü–æ—Å–ª–µ –∑–∞–≥—Ä—É–∑–∫–∏ –≤—Å–µ—Ö —Ñ–∞–π–ª–æ–≤ –Ω–∞–∂–º–∏—Ç–µ "–ó–∞–≤–µ—Ä—à–∏—Ç—å –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ —Ñ–∞–π–ª–æ–≤".`)
            return
        }
    }

    if (ctx.message.video) {
        if (!regex.test(ctx.message.video.mime_type || "")) {
            await ctx.reply(`–§–∞–π–ª ${ctx.message.video.file_name} –Ω–µ –ø—Ä–∏–Ω—è—Ç, —Ç–∞–∫ –∫–∞–∫ –Ω–µ —è–≤–ª—è–µ—Ç—Å—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ–º –∏–ª–∏ –≤–∏–¥–µ–æ.\n–§–æ—Ç–æ –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã –∫–∞–∫ —Ñ–∞–π–ª, –±–µ–∑ —Å–∂–∞—Ç–∏—è.\n–í–∏–¥–µ–æ –º–æ–∂–Ω–æ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ —Å–∂–∞—Ç–∏–µ–º.\n\n–ü–æ—Å–ª–µ –∑–∞–≥—Ä—É–∑–∫–∏ –≤—Å–µ—Ö —Ñ–∞–π–ª–æ–≤ –Ω–∞–∂–º–∏—Ç–µ "–ó–∞–≤–µ—Ä—à–∏—Ç—å –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ —Ñ–∞–π–ª–æ–≤".`)
            return
        }
    }

    const file = await ctx.getFile()
    if (file.file_size && file.file_size * 0.000001 < 1) {
        await ctx.reply("–†–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞ –Ω–µ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –º–µ–Ω—å—à–µ 1MB.\n\n–ü–æ—Å–ª–µ –∑–∞–≥—Ä—É–∑–∫–∏ –≤—Å–µ—Ö —Ñ–∞–π–ª–æ–≤ –Ω–∞–∂–º–∏—Ç–µ '–ó–∞–≤–µ—Ä—à–∏—Ç—å –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ —Ñ–∞–π–ª–æ–≤'.", {
            reply_parameters: {message_id: ctx.msg.message_id}
        })
        return
    }
    if (file.file_size && file.file_size * 0.000001 > 20) {
        await ctx.reply("–†–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞ –Ω–µ –¥–æ–ª–∂–µ–Ω –ø—Ä–µ–≤—ã—à–∞—Ç—å 20MB. –ï—Å–ª–∏ –≤—ã –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç–µ –≤–∏–¥–µ–æ - –º–æ–∂–µ—Ç–µ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –µ–≥–æ —Å–æ —Å–∂–∞—Ç–∏–µ–º –∏–ª–∏ –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –ø–µ—Ä–µ–¥ –æ—Ç–ø—Ä–∞–≤–∫–æ–π.\n\n–ü–æ—Å–ª–µ –∑–∞–≥—Ä—É–∑–∫–∏ –≤—Å–µ—Ö —Ñ–∞–π–ª–æ–≤ –Ω–∞–∂–º–∏—Ç–µ '–ó–∞–≤–µ—Ä—à–∏—Ç—å –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ —Ñ–∞–π–ª–æ–≤'.", {
            reply_parameters: {message_id: ctx.msg.message_id}
        })
        return
    }

    const fileUrl = await bot.api.getFile(file.file_id).then(res => res.getUrl())
    const regex2 = /\.(heic|heiv)$/i
    if (regex2.test(file.file_path || "")) {
        await ctx.replyWithPhoto(new InputFile("files/instruction.png"), {
            caption: "–í—ã –æ—Ç–ø—Ä–∞–≤–∏–ª–∏ —Ñ–∞–π–ª, —Ñ–æ—Ä–º–∞—Ç –∫–æ—Ç–æ—Ä–æ–≥–æ –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è –±–æ—Ç–æ–º (HEIC/HEIV). –î–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è —Ñ–æ—Ä–º–∞—Ç–∞ –Ω–∞ IPhone –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –æ—Ç–∫—Ä—ã—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –∏ –∏–∑–º–µ–Ω–∏—Ç—å —Ñ–æ—Ä–º–∞—Ç —Å–æ—Ö—Ä–∞–Ω—è–µ–º—ã—Ö —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π –Ω–∞ '–ù–∞–∏–±–æ–ª–µ–µ —Å–æ–≤–º–µ—Å—Ç–∏–º—ã–π', –∫–∞–∫ —É–∫–∞–∑–∞–Ω–æ –Ω–∞ —Å–∫—Ä–∏–Ω—à–æ—Ç–µ.",
            reply_parameters: {message_id: ctx.msg.message_id}
        })
        return
    } else {
        await ctx.react("üëç")
        ctx.session.marketing_report = {
            ...ctx.session.marketing_report,
            reportData: {
                ...ctx.session.marketing_report.reportData,
                photos: [...ctx.session.marketing_report.reportData.photos, fileUrl]
            }
        }
        return
    }
})


bot.catch(err => {
    const ctx = err.ctx;
    console.error(`–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è ${ctx.update.update_id}:`);
    const e = err.error;
    if (e instanceof GrammyError) {
        console.error("–û—à–∏–±–∫–∞ –≤ –∑–∞–ø—Ä–æ—Å–µ:", e.description);
    } else if (e instanceof HttpError) {
        console.error("–ù–µ —É–¥–∞–ª–æ—Å—å —Å–≤—è–∑–∞—Ç—å—Å—è —Å Telegram:", e);
    } else {
        console.error("–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞:", e);
    }
})


bot.command("start", async (ctx: MyContext) => {
    const user = await getUser(ctx)
    if (!user) return
    ctx.session.marketing_report_period = null
    ctx.session.marketing_report_files = []
    ctx.session.marketing_report = null
    ctx.session.marketing_report_curren_files = []
    await ctx.reply(`–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å, ${user.name}! –í—ã–±–µ—Ä–∏—Ç–µ –∏–Ω—Ç–µ—Ä–µ—Å—É—é—â–∏–π –≤–∞—Å –ø—É–Ω–∫—Ç –º–µ–Ω—é`, {reply_markup: startKeyboard})
});

export default bot